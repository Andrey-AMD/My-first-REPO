 Инструкция по работе с Git

 1. Настройка Git

**1.1 Установка Git:**

* Скачайте и установите Git с официального сайта: [https://git-scm.com/](https://git-scm.com/)
* Следуйте инструкциям установщика.

**1.2 Настройка Git:**

* Откройте командную строку (терминал).
* Введите команду `git config --global user.name "Ваше имя"` и нажмите Enter.
* Введите команду `git config --global user.email "ваш_email@example.com"` и нажмите Enter.

 2. Инициализация репозитория

**2.1 Создание нового репозитория:**

* Перейдите в папку, где вы хотите создать репозиторий.
* Введите команду `git init` и нажмите Enter.
* В папке появится скрытая папка `.git`, которая содержит все данные репозитория.

**2.2 Добавление существующего проекта в репозиторий:**

* Перейдите в папку с проектом.
* Введите команду `git init` и нажмите Enter.
* Введите команду `git add .` и нажмите Enter, чтобы добавить все файлы в индекс.
* Введите команду `git commit -m "Первоначальный коммит"` и нажмите Enter, чтобы создать первый коммит.

 3. Работа с ветками

**3.1 Создание ветки:**

* Введите команду `git checkout -b название_ветки` и нажмите Enter.

**3.2 Переключение между ветками:**

* Введите команду `git checkout название_ветки` и нажмите Enter.

**3.3 Слияние веток:**

* Переключитесь на ветку, в которую хотите слить изменения.
* Введите команду `git merge название_сливаемой_ветки` и нажмите Enter.

**3.4 Решение конфликтов:**

* Если при слиянии возник конфликт, Git покажет вам файлы с конфликтами.
* Откройте файлы и разрешите конфликты вручную.
* Сохраните изменения в файлах.
* Введите команду `git add .` и нажмите Enter.
* Введите команду `git commit -m "Разрешение конфликта"` и нажмите Enter.

 4. Пример работы с ветками

В этом примере мы создадим 4 ветки:

* `feature/new-feature` - новая функциональность
* `fix/bug-fix` - исправление ошибки
* `hotfix/urgent-fix` - срочное исправление
* `release/v1.0.0` - релизная ветка

**4.1 Создание ветки `feature/new-feature`:**

```
git checkout -b feature/new-feature
```

**4.2 Внесение изменений в ветку `feature/new-feature`:**

* Добавьте новую функциональность в проект.
* Введите команду `git add .` и нажмите Enter.
* Введите команду `git commit -m "Добавлена новая функциональность"` и нажмите Enter.

**4.3 Создание ветки `fix/bug-fix`:**

```
git checkout -b fix/bug-fix
```

**4.4 Внесение изменений в ветку `fix/bug-fix`:**

* Исправьте ошибку в проекте.
* Введите команду `git add .` и нажмите Enter.
* Введите команду `git commit -m "Исправлена ошибка"` и нажмите Enter.

**4.5 Создание ветки `hotfix/urgent-fix`:**

```
git checkout -b hotfix/urgent-fix
```

**4.6 Внесение изменений в ветку `hotfix/urgent-fix`:**

* Исправьте срочную ошибку в проекте.
* Введите команду `git add .` и нажмите Enter.
* Введите команду `git commit -m "Срочное исправление ошибки"` и нажмите Enter.

**4.7 Создание ветки `release/v1.0.0`:**

```
git checkout -b release/v1.0.0
```

**4.8 Слияние ветки `feature/new-feature`:**

```
git merge feature/new-feature
```

**4.9 Слияние ветки `fix/bug-fix`:**

```
git merge fix/bug-fix
```

**4.10 Слияние ветки `hotfix/urgent-fix`:**

```
git merge hotfix/urgent-fix
```

**4.11 Разрешение конфликта:**

* При слиянии ветки `hotfix/urgent-fix` может возникнуть конфликт с веткой `release/v1.0.0`.
* Откройте файл с конфликтом и разрешите его вручную.
* Сохраните изменения в файле.
* Введите команду `git add .` и нажмите Enter.
* Введите команду `git commit -m "Разрешен конфликт"` и нажмите Enter.

**4.12 Публикация релиза:**

* Введите команду `git tag v1.0.0` и нажмите Enter, чтобы создать тег для релиза.
* Введите команду `git push origin release/v1.0.0` и нажмите Enter, чтобы отправить ветку `release/v1.0.0` на сервер.
* Введите команду `git push origin v1.0.0` и нажмите Enter, чтобы отправить тег на сервер.

 5. Дополнительные команды

**5.1 Просмотр истории коммитов:**

```
git log
```

**5.2 Отмена последнего коммита:**

```
git revert HEAD
```

**5.3 Возврат к предыдущему коммиту:**

```
git reset --hard HEAD^
```

**5.4 Отправка изменений на сервер:**

```
git push origin название_ветки
```

**5.5 Получение изменений с сервера:**

```
git pull origin название_ветки
```

 6. Проект с примером

[Ссылка на архив проекта](https://github.com/your-username/your-repo/archive/refs/heads/main.zip)

**Важно:** Замените `your-username` и `your-repo` на реальные имена пользователя и репозитория.

В архиве проекта вы найдете пример реализации всех описанных выше действий с Git.

7. Ресурсы

* **Официальная документация Git:** [https://git-scm.com/doc](https://git-scm.com/doc)
* **GitHub:** [https://github.com](https://github.com)
* **GitLab:** [https://gitlab.com](https://gitlab.com)
* **Bitbucket:** [https://bitbucket.org](https://bitbucket.org)

 8. Советы

* Используйте ветки для изоляции изменений.
* Делайте частые коммиты с понятными сообщениями.
* Используйте теги для маркировки релизов.
* Используйте pull requests для обзора кода.
* Используйте сервисы Git, такие как GitHub, GitLab или Bitbucket, для хранения и совместной работы над проектами.